import { supabase } from "../../lib/supabase.mjs";
import readline from 'readline';
import dotenv from 'dotenv';
dotenv.config(); // Charge les variables d'environnement depuis .env

// Configuration de l'API Claude (Anthropic)
const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY; // √Ä d√©finir dans vos variables d'environnement
const CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages';

// Interface pour la saisie utilisateur
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

/**
 * Demande une saisie utilisateur
 */
function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

/**
 * Appel √† l'API Claude AI
 */
async function callClaudeAPI(prompt, content) {
  if (!CLAUDE_API_KEY) {
    throw new Error('CLAUDE_API_KEY non d√©finie dans les variables d\'environnement');
  }

  const requestBody = {
    model: "claude-3-5-sonnet-20241022",
    max_tokens: 4000,
    messages: [
      {
        role: "user",
        content: `${prompt}\n\nContenu √† r√©√©crire:\n${content}`
      }
    ]
  };

  try {
    const response = await fetch(CLAUDE_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': CLAUDE_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erreur API Claude: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return data.content[0].text;
  } catch (error) {
    console.error('Erreur lors de l\'appel √† Claude AI:', error.message);
    throw error;
  }
}

/**
 * G√©n√®re un prompt personnalis√© pour la r√©√©criture
 */
function generatePrompt(shopDescription, contentType, originalShop) {
  return `Tu es un expert en r√©daction commerciale et marketing. Je veux que tu r√©√©cris le contenu suivant pour un nouveau shop.

INFORMATIONS SUR LE NOUVEAU SHOP:
${shopDescription}

SHOP ORIGINAL:
${originalShop}

TYPE DE CONTENU: ${contentType}

INSTRUCTIONS:
1. Adapte compl√®tement le contenu au nouveau shop tout en gardant la structure et le ton professionnel
2. Remplace tous les noms de marques, produits et r√©f√©rences sp√©cifiques par ceux du nouveau shop
3. Conserve la longueur approximative du texte original
4. Garde le m√™me niveau de d√©tail et de persuasion
5. Assure-toi que le contenu soit coh√©rent avec l'identit√© du nouveau shop
6. Conserve le format HTML/Markdown si pr√©sent
7. Ne traduis pas, reste en fran√ßais
8. R√©ponds uniquement avec le contenu r√©√©crit, sans commentaires suppl√©mentaires

IMPORTANT: Le contenu r√©√©crit doit √™tre pr√™t √† √™tre utilis√© directement sans modification.`;
}

/**
 * Mise √† jour du contenu pour singulariser un shop
 */
async function rewriteShop(targetShopId) {
  console.log('=== SCRIPT DE MISE √Ä JOUR DE SHOP AVEC CLAUDE AI ===\n');

  // 1. Collecte des informations sur le nouveau shop
  console.log('üìù Analyse du nouveau shop')
  const shopName = 'R√©f√©rence Halt√®res';
  const shopSector = 'Secteur d\'activit√© : sport, tech, musculation, halt√®rophilie, etc.: ';
  const shopProducts = 'Types de produits vendus: halt√®res, kits et ensembles dhalt√®res, barres de musculation, etc.: '	;
  const shopTone = 'Ton souhait√© : accessible, sportif, amical';

  const shopDescription = `
Nom: ${shopName}
Secteur: ${shopSector}
Produits: ${shopProducts}
Ton: ${shopTone}
  `.trim();

  console.log('\nüîç R√©cup√©ration des informations du shop cible...');

  // 2. R√©cup√©rer les informations du shop cible
  const { data: targetShop, error: shopError } = await supabase
    .from('shops')
    .select('*')
    .eq('id', targetShopId)
    .single();

  if (shopError || !targetShop) {
    console.error('Erreur: Shop cible introuvable');
    rl.close();
    return;
  }

  const originalShop = `Shop g√©n√©rique √† personnaliser`;
  // 3. Traitement des contenus
  console.log('\nüìÑ Traitement des contenus...');
  
  const { data: contents, error: contentsError } = await supabase
    .from('contents')
    .select('*')
    .eq('shop_id', targetShopId);

  if (contentsError) {
    console.error('Erreur lors de la r√©cup√©ration des contenus:', contentsError.message);
    rl.close();
    return;
  }

  if (contents && contents.length > 0) {
    console.log(`üìã ${contents.length} contenus trouv√©s. Mise √† jour en cours...`);

    for (let i = 0; i < contents.length; i++) {
      const content = contents[i];
      console.log(`\n‚ö° Traitement du contenu ${i + 1}/${contents.length}: ${content.page || content.id}`);

      try {
        // V√©rifier quelle propri√©t√© contient le contenu principal
        let contentText = '';
        let updateData = {};
        
        // Rechercher la propri√©t√© qui contient le texte principal
        if (content.text && content.text.trim().length > 10) {
          contentText = content.text;
          const prompt = generatePrompt(shopDescription, `Page: ${content.page}`, originalShop);
          console.log('   ü§ñ Appel √† Claude AI pour le texte...');
          const newText = await callClaudeAPI(prompt, content.text);
          updateData.text = newText;
          console.log('   ‚úÖ Texte r√©√©crit avec succ√®s');
        }

        // R√©√©criture du titre si pr√©sent
        if (content.title && content.title.trim().length > 0) {
          const titlePrompt = generatePrompt(shopDescription, 'Titre de page', originalShop);
          console.log('   ü§ñ R√©√©criture du titre...');
          const newTitle = await callClaudeAPI(titlePrompt, content.title);
          updateData.title = newTitle;
          console.log('   ‚úÖ Titre r√©√©crit avec succ√®s');
        }

        // Mettre √† jour si nous avons des modifications
        if (Object.keys(updateData).length > 0) {
          const { error: updateError } = await supabase
            .from('contents')
            .update(updateData)
            .eq('id', content.id);

          if (updateError) {
            console.error(`   ‚ùå Erreur lors de la mise √† jour: ${updateError.message}`);
          } else {
            console.log('   üíæ Contenu mis √† jour en base');
          }
        } else {
          console.log('   ‚è≠Ô∏è Aucun contenu √† mettre √† jour');
        }

        // Petite pause pour √©viter de surcharger l'API
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`   ‚ùå Erreur lors du traitement: ${error.message}`);
      }
    }
  }
  // 4. Traitement des cat√©gories
  console.log('\nüìÇ Traitement des cat√©gories...');
  
  const { data: categories, error: categoriesError } = await supabase
    .from('categories')
    .select('*')
    .eq('shop_id', targetShopId);

  if (categoriesError) {
    console.error('Erreur lors de la r√©cup√©ration des cat√©gories:', categoriesError.message);
  } else if (categories && categories.length > 0) {
    console.log(`üìã ${categories.length} cat√©gories trouv√©es. Mise √† jour en cours...`);

    for (let i = 0; i < categories.length; i++) {
      const category = categories[i];
      console.log(`\n‚ö° Traitement de la cat√©gorie ${i + 1}/${categories.length}: ${category.name}`);

      try {
        let updateData = {};

        // R√©√©criture du nom de cat√©gorie
        if (category.name && category.name.trim().length > 0) {
          const namePrompt = generatePrompt(shopDescription, 'Nom de cat√©gorie', originalShop);
          console.log('   ü§ñ R√©√©criture du nom...');
          const newName = await callClaudeAPI(namePrompt, category.name);
          updateData.name = newName;
          console.log('   ‚úÖ Nom r√©√©crit avec succ√®s');
        }

        // R√©√©criture de la description si pr√©sente
        if (category.desc && category.desc.trim().length > 10) {
          const descPrompt = generatePrompt(shopDescription, 'Description de cat√©gorie', originalShop);
          console.log('   ü§ñ R√©√©criture de la description...');
          const newDescription = await callClaudeAPI(descPrompt, category.desc);
          updateData.desc = newDescription;
          console.log('   ‚úÖ Description r√©√©crite avec succ√®s');
        }

        // Mettre √† jour si nous avons des modifications
        if (Object.keys(updateData).length > 0) {
          const { error: updateError } = await supabase
            .from('categories')
            .update(updateData)
            .eq('id', category.id);

          if (updateError) {
            console.error(`   ‚ùå Erreur lors de la mise √† jour: ${updateError.message}`);
          } else {
            console.log('   üíæ Cat√©gorie mise √† jour en base');
          }
        } else {
          console.log('   ‚è≠Ô∏è Aucune modification n√©cessaire');
        }

        // Petite pause pour √©viter de surcharger l'API
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`   ‚ùå Erreur lors du traitement: ${error.message}`);
      }
    }
  }

  console.log(`\nüéâ Mise √† jour termin√©e pour le shop "${shopName}"!`);
  console.log(`üìä R√©sum√©: shop_id ${targetShopId} personnalis√© avec succ√®s`);
  
  rl.close();
}

// R√©cup√©rer les arguments de la ligne de commande
const args = process.argv.slice(2);
const targetShopId = parseInt(args[0]);

if (!targetShopId) {
  console.error('Usage: node rewriteShop.mjs <targetShopId>');
  console.error('Exemple: node rewriteShop.mjs 2');
  process.exit(1);
}

// Lancement du script
rewriteShop(targetShopId);

/* 
CONFIGURATION REQUISE:
1. D√©finir la variable d'environnement CLAUDE_API_KEY avec votre cl√© API Anthropic
2. Installer les d√©pendances: npm install

UTILISATION:
node rewriteShop.mjs <targetShopId>

Exemples:
- Pour mettre √† jour le contenu du shop 2:
  node rewriteShop.mjs 2
- Pour mettre √† jour le contenu du shop 3:
  node rewriteShop.mjs 3

Le script va automatiquement mettre √† jour tous les contenus et cat√©gories du shop avec les nouvelles informations d√©finies dans le script.
*/
